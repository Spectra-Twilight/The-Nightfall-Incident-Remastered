#ifndef NIGHTFALL_PROGRAM_HPP
#define NIGHTFALL_PROGRAM_HPP

////////////////////////////////////////////////////////////////////////////////
/// Standard Library Includes
////////////////////////////////////////////////////////////////////////////////
#include <string>

////////////////////////////////////////////////////////////////////////////////
/// SFML Includes
////////////////////////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>

////////////////////////////////////////////////////////////////////////////////
/// Nightfall Includes
////////////////////////////////////////////////////////////////////////////////
#include <Nightfall/Command.hpp>

namespace nightfall
{
	////////////////////////////////////////////////////////////////////////////
	/// \brief A single Program game piece instance, to be contained within a Grid.
	////////////////////////////////////////////////////////////////////////////
	class Program
	{
	public:
		class Factory; // Program_Factory.hpp

		////////////////////////////////////////////////////////////////////////
		/// \brief Constructs a Program instance using the attributes of the provided Factory.
		///
		/// \param factory The Program Factory to construct this Program from.
		////////////////////////////////////////////////////////////////////////
		Program(const Factory* factory);

		////////////////////////////////////////////////////////////////////////
		/// \brief Returns the Factory from which this Program was constructed.
		///
		/// \return A constant pointer to this Program's Factory.
		////////////////////////////////////////////////////////////////////////
		const Factory* factory() const;

		////////////////////////////////////////////////////////////////////////
		///	\brief Returns this Program's maximum size.
		///
		/// The maximum size of a Program determines how many Sectors it can 
		/// occupy simultaneously. If a Program exceeds its maximum size, then
		/// the occupied Sector that was traversed least recently will be 
		/// vacated.
		///
		/// \return The maximum size of the Program.
		////////////////////////////////////////////////////////////////////////
		uint8_t max_size() const;

		////////////////////////////////////////////////////////////////////////
		///	\brief Return this Program's movement speed.
		///
		///	The speed of a Program represents how many Sectors it is capable 
		/// of traversing in a single turn.
		///
		/// \return The movement speed of the Program.
		////////////////////////////////////////////////////////////////////////
		uint8_t move_speed() const;

	private:
		////////////////////////////////////////////////////////////////////////
		/// Instance Members
		////////////////////////////////////////////////////////////////////////
		const Factory* _factory; ///< The Factory from which this Program was created.
		uint8_t _max_size; ///< The maximum number of Sectors this Program instance may support at once.
		uint8_t _move_speed; ///< The maximum number of Sectors this Program may traverse in one turn.
	};
} // namespace nightfall

#endif // NIGHTFALL_PROGRAM_HPP